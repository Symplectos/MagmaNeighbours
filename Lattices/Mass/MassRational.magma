/*
 * File:   MassRational.m
 * Author: Ivica Turkalj, Michael Jürgens, Gilles Bellot
 * Date:   2014 - Dortmund - Germany
 *
 * Description: Computes the rational Maß of a lattice L
 * 
 * Literature:	- Low-Dimensional Lattices IV: The Mass Formula (J. H. Conway; N. J. A. Sloane) [CS]
 *
 * History:	-       2014: created by Ivica Turkalj
 * 		- 30/05/2014: changed to intrinsic (GB)
 * 		- 30/05/2014: added English comments
 *
 * ToDo:
 * 
 * Notes:
 */


/*********************************************************************************************************************
Hilfsfunktion: Berechnet den Wert aus Tabelle 6 im Conway & Sloane Paper.
	       Computes the values from table 6 in [CS]
s <-- n=2s-1
d = Determinante
**********************************************************************************************************************/
Zeta_D:=function(s,d); 

D:=(-1)^s *d;

chi:=KroneckerCharacter(D);
for p in PrimeDivisors(2*D) do
 Char:=Elements(DirichletGroup(p))[1];
 chi*:=Char;
end for;

k:=Modulus(chi);
psi:=KroneckerCharacter(D);

res:=1;
for p in PrimeDivisors(k) do
 res*:=(1-psi(p)/p^s);
end for;

res*:=2^s/(Factorial(s)*((-1)^s+psi(-1)));

k1:=Conductor(psi);
tmp:=0;
for r:=1 to k1 do
 tmp+:=psi(r)*Evaluate(BernoulliPolynomial(s),r/k1);
end for;

res*:=tmp;

_,wurzel:=IsSquare(d/k1);
return AbsoluteValue(res*d^(s-1)*wurzel);

end function;


/*****************************************************************************************************************************************
Hilfsfunktion: Berechnet den rationalen Anteil des Wertes der Gamma-Funktion an halbganzen Stellen, ganzzahlige Stellen eingeschlossen.
               Computes the rational part of the value of the Gamma-function at "semi-integral" values, integral values included. 
*****************************************************************************************************************************************/
Gamma_rational:=function(x)

if x in Integers() then
  g:=Factorial(Integers()!(x-1));
else 
  x:=Floor(x);
  g:=Factorial(2*x)/(Factorial(x)*4^x);
end if;

return g;

end function;


/*************************************************************************************************************
Hilfsfunktion: Berechnet den rationalen Anteil der Riemann'schen Zetafunktion an geraden positiven Stellen.
               Computes the rational part of the Riemann-Zeta-function at even values.
*************************************************************************************************************/

Riemann_rational:=function(x);

n:=Integers()!(x/2);
r:=(-1)^(n-1) * 2^(2*n)/(2*Factorial(2*n)) * BernoulliNumber(2*n);

return r;

end function;


/****************************************************************
Berechnet das Maß eines Gitters L.
Computes the Maß of a lattice L.

Input: A lattice L. 
Ouput: das Maß als rationale Zahl. (rational Maß)
****************************************************************/
intrinsic MassRational(L::Lat) -> FldRatElt
{ Computes the rational Maß of a lattice L. }
G:=GramMatrix(L);
G:=ChangeRing(G,Integers());
d:=Determinant(G);
n:=NumberOfRows(G);
s:=Ceiling(n/2);
g:=GenusSymbol(G);

/****************************************************************
************ rationaler Anteil des Standard-Maßes ***************
************ rational part of the standard Maß ******************
****************************************************************/
std_rational:=2;
for j in [1..n] do
 std_rational:=std_rational*Gamma_rational(j/2);
end for;

for i in [1..s-1] do
 std_rational:=std_rational*Riemann_rational(2*i);
end for;

_,dd:=SquarefreeFactorization(d);
if (n mod 2) eq 0 then 
 std_rational:=std_rational*Zeta_D(s,d)*d^(-(s-1))*dd^(-1);
end if;

/****************************************************************
********************* std_p  für alle p *************************
****************************************************************/
STD_p:=[];
for i in [1..#g] do
 if s eq 1 then std_p:=1/2;
  else std_p:=(2*&*[1-g[i][1]^(2-2*j) : j in [2..s]])^(-1);
 end if;
 STD_p:=Append(STD_p, [g[i][1],std_p]);
end for;
 
/****************************************************************
******************* cross-term für alle p ***********************
****************************************************************/
crossterm:=[];
for i in [1..#g] do
 crossterm_p:=1;
 for j in [1..#g[i][2]-1] do
  for k in [j+1..#g[i][2]] do
   crossterm_p:=crossterm_p * ((g[i][1]^g[i][2][k][1])/(g[i][1]^g[i][2][j][1]))^(Floor(g[i][2][k][2]*g[i][2][j][2]*1/2));
  end for;
 end for;
 crossterm:=Append(crossterm, [g[i][1], Rationals()!crossterm_p]);
end for;

/****************************************************************
************************ type-factor ****************************
****************************************************************/
nI_I:=0;
for i in [1..#g[1][2]-1] do
 if (g[1][2][i][4] eq 1 and g[1][2][i+1][4] eq 1) then nI_I:=nI_I+1; end if;
end for; 

nII:=0;
for i in [1..#g[1][2]] do
 if g[1][2][i][4] eq 0 then nII:=nII+g[1][2][i][2]; end if;
end for;

type_factor:=2^(nI_I-nII);

/****************************************************************
******************** diagonal-product ***************************
****************************************************************/
diagonal_product:=[];
/*********** diagonal_factor für ungerade Stellen *******/
for i in [2..#g] do
 diagonal_factor:=[];
 for j in [1..#g[i][2]] do
  /********* Dimension der Jordankomponente ist gerade und größer 2 *******/
  if (g[i][2][j][2] mod 2) eq 0 and g[i][2][j][2] gt 2 then
   if (g[i][1] mod 4) eq 3 and (g[i][2][j][2] mod 4) eq 0 and g[i][2][j][3] eq 1 then eps:=1; end if;
   if (g[i][1] mod 4) eq 3 and (g[i][2][j][2] mod 4) eq 0 and g[i][2][j][3] eq -1 then eps:=-1; end if;
   if (g[i][1] mod 4) eq 1 and (g[i][2][j][2] mod 4) eq 0 and g[i][2][j][3] eq 1 then eps:=1; end if;
   if (g[i][1] mod 4) eq 1 and (g[i][2][j][2] mod 4) eq 0 and g[i][2][j][3] eq -1 then eps:=-1; end if;
   if (g[i][1] mod 4) eq 3 and (g[i][2][j][2] mod 4) eq 2 and g[i][2][j][3] eq 1 then eps:=-1; end if;
   if (g[i][1] mod 4) eq 3 and (g[i][2][j][2] mod 4) eq 2 and g[i][2][j][3] eq -1 then eps:=1; end if;
   if (g[i][1] mod 4) eq 1 and (g[i][2][j][2] mod 4) eq 2 and g[i][2][j][3] eq 1 then eps:=1; end if;
   if (g[i][1] mod 4) eq 1 and (g[i][2][j][2] mod 4) eq 2 and g[i][2][j][3] eq -1 then eps:=-1; end if;
   si:=Ceiling(g[i][2][j][2]/2);
   diagonal_factor:=Append(diagonal_factor, 1/2*(1-eps*(g[i][1]^(-si)))^(-1) * &*[1/(1-g[i][1]^(2-2*k)) : k in [2..si]]);
  end if;
  /******* Dimension der Jordankomponente ist ungerade und größer 1 *******/
  if (g[i][2][j][2] mod 2) eq 1 and g[i][2][j][2] gt 1 then 
   si:=Ceiling(g[i][2][j][2]/2);
   diagonal_factor:=Append(diagonal_factor, 1/2 * &*[(1-g[i][1]^(2-2*k))^(-1) : k in [2..si]]);
  end if;
   /******* 2 dim. Jordankomponente ******/
  if g[i][2][j][2] eq 2 and g[i][1] mod 4 eq 3 and g[i][2][j][3] eq 1 then diagonal_factor:=Append(diagonal_factor, g[i][1]/(2*g[i][1]+2)); end if;
  if g[i][2][j][2] eq 2 and g[i][1] mod 4 eq 3 and g[i][2][j][3] eq -1 then diagonal_factor:=Append(diagonal_factor, g[i][1]/(2*g[i][1]-2)); end if;
  if g[i][2][j][2] eq 2 and g[i][1] mod 4 eq 1 and g[i][2][j][3] eq 1 then diagonal_factor:=Append(diagonal_factor, g[i][1]/(2*g[i][1]-2)); end if;
  if g[i][2][j][2] eq 2 and g[i][1] mod 4 eq 1 and g[i][2][j][3] eq -1 then diagonal_factor:=Append(diagonal_factor, g[i][1]/(2*g[i][1]+2)); end if;
  
  /******* 1 dim. Jordankomponente ******/
  if g[i][2][j][2] eq 1 then 
   diagonal_factor:=Append(diagonal_factor, 1/2);
  end if; 
 end for;
 diagonal_product:=Append(diagonal_product, [g[i][1], &*[x : x in diagonal_factor]]); 
end for;


/****** diagonal_factor für die gerade Stelle *****/
diagonal_factor_2:=[];

/*************** love_forms ***********************/
love_forms:={};
for j in [1..#g[1][2]] do
 if j eq 1 and g[1][2][j][4] eq 1 then love_forms:=love_forms join {g[1][2][j][1]-1}; end if;
 if j eq #g[1][2] and g[1][2][j][4] eq 1 then love_forms:=love_forms join {g[1][2][j][1]+1}; end if;
 if j gt 1 and g[1][2][j][4] eq 1 and g[1][2][j-1][1] ne g[1][2][j][1]-1 then love_forms:=love_forms join {g[1][2][j][1]-1}; end if;
 if j lt #g[1][2] and g[1][2][j][4] eq 1 and g[1][2][j+1][1] ne g[1][2][j][1]+1 then love_forms:=love_forms join {g[1][2][j][1]+1}; end if;
end for;
 

for j in [1..#g[1][2]] do 
 /***********octane-value**********/
 if g[1][2][j][3] eq 1 then ov:=g[1][2][j][5] mod 8; end if;
 if g[1][2][j][3] eq -1 then ov:=(g[1][2][j][5]+4) mod 8; end if;
 
 
 /******* free or bounded *********/
 if j gt 1 and j lt #g[1][2] then
  if g[1][2][j][1]-1 in love_forms and g[1][2][j][1]+1 in love_forms then free:=true; end if;
  if g[1][2][j][1]-1 in love_forms and not(g[1][2][j][1]+1 in love_forms) then 
   if g[1][2][j+1][4] eq 0 then free:=true; else free:=false; end if;
  end if;
  if not(g[1][2][j][1]-1 in love_forms) and g[1][2][j][1]+1 in love_forms then 
   if g[1][2][j-1][4] eq 0 then free:=true; else free:=false; end if;
  end if;
  if not(g[1][2][j][1]-1 in love_forms) and not(g[1][2][j][1]+1 in love_forms) then 
   if g[1][2][j-1][4] eq 0 and g[1][2][j-1][4] eq 0 then free:=true; else free:=false; end if;
  end if;  
 end if;
 
 if j gt 1 and j eq #g[1][2] then
  if g[1][2][j][1]-1 in love_forms then free:=true;
   else if g[1][2][j-1][4] eq 0 then free:=true; else free:=false; end if;
  end if;
 end if;

 if j eq 1 and j lt #g[1][2] then
  if g[1][2][j][1]+1 in love_forms then free:=true;
   else if g[1][2][j+1][4] eq 0 then free:=true; else free:=false; end if;
  end if;
 end if;

 if j eq 1 and j eq #g[1][2] then
  free:=true;
 end if;
 
 
 /******** eps, s und diagonal_factor_2 für Jordankomponenten mit Dimension größer 4 ******************/
 if g[1][2][j][2] gt 4 then
  if (g[1][2][j][2] mod 2) eq 0 and g[1][2][j][4] eq 0 and ov mod 8 in {0,1,7} and free then eps:=1; si:=Ceiling(g[1][2][j][2]/2); end if;
  if (g[1][2][j][2] mod 2) eq 0 and g[1][2][j][4] eq 0 and ((ov mod 8 in {2,6}) or (not(free))) then eps:=0; si:=Ceiling((g[1][2][j][2]+1)/2); end if;
  if (g[1][2][j][2] mod 2) eq 0 and g[1][2][j][4] eq 0 and ov mod 8 in {3,4,5} and free then eps:=-1; si:=g[1][2][j][2]/2; end if;
 
  if (g[1][2][j][2] mod 2) eq 1 and (ov mod 8 in {0,1,7}) and free then eps:=1; si:=Ceiling((g[1][2][j][2]-1)/2); end if;
  if (g[1][2][j][2] mod 2) eq 1 and ((ov in {2,6}) or (not(free))) then eps:=0; si:=Ceiling((g[1][2][j][2])/2); end if;
  if (g[1][2][j][2] mod 2) eq 1 and ov in {3,4,5} and free then eps:=-1; si:=Ceiling((g[1][2][j][2]-1)/2); end if;
 
  if g[1][2][j][2] mod 2 eq 0 and g[1][2][j][4] eq 1 and ov in {0,1,7} and free then eps:=1; si:=Ceiling(((g[1][2][j][2]-2)/2)); end if;
  if g[1][2][j][2] mod 2 eq 0 and g[1][2][j][4] eq 1 and ((ov in {2,6}) or (not(free))) then eps:=0; si:=Ceiling((g[1][2][j][2]-1)/2); end if;
  if g[1][2][j][2] mod 2 eq 0 and g[1][2][j][4] eq 1 and ov in {3,4,5} and free then eps:=-1; si:=Ceiling(((g[1][2][j][2]-2)/2)); end if;
  
  si:=Integers()!si;
  diagonal_factor_2:=Append(diagonal_factor_2,1/2 * (1-eps*(2^(-si)))^(-1) * &*[(1-2^(2-2*k))^(-1) : k in [2..si]]); 
 end if;                                      
 
 /******* diagonal_factor_2 für Jordankomponenten mit Dimension 1,2,3 und 4****/
 if g[1][2][j][2] eq 1 and g[1][2][j][4] eq 1 and free and ov mod 8 in {0,1,7} then diagonal_factor_2:=Append(diagonal_factor_2,1); end if;
 if g[1][2][j][2] eq 1 and g[1][2][j][4] eq 1 and ((not(free)) or (ov mod 8 in {2,6})) then diagonal_factor_2:=Append(diagonal_factor_2,1/2); end if;
 
 if g[1][2][j][2] eq 2 and g[1][2][j][4] eq 1 and free and ov mod 8 in {0,1,7} then diagonal_factor_2:=Append(diagonal_factor_2,1); end if;
 if g[1][2][j][2] eq 2 and g[1][2][j][4] eq 1 and ((not(free)) or (ov mod 8 in {2,6})) then diagonal_factor_2:=Append(diagonal_factor_2,1/2); end if;
 
 if g[1][2][j][2] eq 2 and g[1][2][j][4] eq 0 and free and ov mod 8 in {0,1,7} then diagonal_factor_2:=Append(diagonal_factor_2,1); end if;
 if g[1][2][j][2] eq 2 and g[1][2][j][4] eq 0 and ((not(free)) or (ov mod 8 in {2,6})) then diagonal_factor_2:=Append(diagonal_factor_2,2/3); end if;
 if g[1][2][j][2] eq 2 and g[1][2][j][4] eq 0 and free and ov mod 8 in {3,4,5} then diagonal_factor_2:=Append(diagonal_factor_2,1/3); end if;

 if g[1][2][j][2] eq 3 and g[1][2][j][4] eq 1 and free and ov mod 8 in {0,1,7} then diagonal_factor_2:=Append(diagonal_factor_2,1); end if; 
 if g[1][2][j][2] eq 3 and g[1][2][j][4] eq 1 and ((not(free)) or (ov mod 8 in {2,6})) then diagonal_factor_2:=Append(diagonal_factor_2,2/3); end if;
 if g[1][2][j][2] eq 3 and g[1][2][j][4] eq 1 and free and ov mod 8 in {3,4,5} then diagonal_factor_2:=Append(diagonal_factor_2,1/3); end if;
 
 if g[1][2][j][2] eq 4 and g[1][2][j][4] eq 1 and free and ov mod 8 in {0,1,7} then diagonal_factor_2:=Append(diagonal_factor_2,1); end if; 
 if g[1][2][j][2] eq 4 and g[1][2][j][4] eq 1 and ((not(free)) or (ov mod 8 in {2,6})) then diagonal_factor_2:=Append(diagonal_factor_2,2/3); end if;
 if g[1][2][j][2] eq 4 and g[1][2][j][4] eq 1 and free and ov mod 8 in {3,4,5} then diagonal_factor_2:=Append(diagonal_factor_2,1/3); end if;
 
 if g[1][2][j][2] eq 4 and g[1][2][j][4] eq 0 and free and ov mod 8 in {0,1,7} then diagonal_factor_2:=Append(diagonal_factor_2,8/9); end if; 
 if g[1][2][j][2] eq 4 and g[1][2][j][4] eq 0 and ((not(free)) or (ov mod 8 in {2,6})) then diagonal_factor_2:=Append(diagonal_factor_2,32/45); end if;
 if g[1][2][j][2] eq 4 and g[1][2][j][4] eq 0 and free and ov mod 8 in {3,4,5} then diagonal_factor_2:=Append(diagonal_factor_2,8/15); end if;
end for;
diagonal_product:=Insert(diagonal_product,1, [2, &*[x : x in diagonal_factor_2]]);


/****************************************************************
*********************** Mass_rational ***************************
****************************************************************/
Mass_rational:=std_rational * &*[diagonal_product[i][2] * crossterm[i][2] / STD_p[i][2] : i in [1..#STD_p]] * type_factor;
if love_forms ne {} then Mass_rational:=Mass_rational * &*[1/2 : i in [1..#love_forms]]; end if;

return Mass_rational;

end intrinsic;























