R:=RealField(100);

function ordorth(prime,dim,typ) 
  // Order of the orthogonal group O_{dim}(F_prime) of
  // Witt defect typ (=1,-1) if dim is even
o:=2;
if (GF(2) ! dim eq 1) then 
   m:= (dim-1) div 2;
   o:=o*prime^(dim*m);
   for i in [1..m] do o:=o*(1-prime^(-2*i)); end for;
return (Integers() ! o);
end if;
m:=dim div 2;
o:=o*prime^((dim-1)*m);
o:=o*(1-typ*prime^(-m));
m:=m-1;
for i in [1..m] do o:=o*(1-prime^(-2*i)); end for;
return (Integers() ! o);
end function;



function massdiag(prime,dim,typ) 
  // Order of the orthogonal group O_{dim}(F_prime) of
  // Witt defect typ (=1,-1) if dim is even
  // up to a normalizing factor which is a power of p
if (GF(2) ! dim eq 1) then 
o:=2;
   m:= (dim-1) div 2;
   for i in [1..m] do o:=o*(1-prime^(-2*i)); end for;
return (1/o);
else
m:=dim div 2;
o:=1;
if (m gt 0) then 
o:=2;
o:=o*(1-typ*prime^(-m));
m:=m-1;
for i in [1..m] do o:=o*(1-prime^(-2*i)); end for;
end if;
return (1/o);
end if;
end function;

function mass2(dim,symbol,det)
// symbol2 = list of 5-tuples
// returns product of global and 2-local factor of the mass
n:=dim;
Mass := 2*Pi(R)^(-n*(n+1)/4); 
for j in [1..n] do Mass := Mass*Gamma(R ! j/2); end for;
if (GF(2) ! n) eq 1 then m:=(n-1) div 2; else m:=(n-2) div 2; end if;
L:=RiemannZeta(:Precision:=100);
 for j in [1..m] do 
 Mass:=Mass*Evaluate(L,2*j);
 end for;
if GF(2) ! n eq 0 then 
 s:=m+1;
D:=(-1)^s*det;
chi:=KroneckerCharacter(D);
 LS:=LSeries(chi:Precision:=100);
 e:= Evaluate(LS, R ! s); 
   PP:=PrimeDivisors(2*D);
    f:=1; for p in PP do f *:=(1-p@chi*p^(-s)); end for;
  Mass:=Mass*e*f;
end if;
// Mass now contains standard mass of a form of this dimension (standard total mass, not standard 2-mass!)
standard2:=2;
for j in [1..m] do 
  standard2:=standard2*(1-2^(-2*j)); 
end for;
// standard2 is really the inverse of the standard 2-mass.
Mass:=Mass*standard2;
for s in [1..#symbol] do
  for t in [s+1..#symbol] do
    e:=symbol[t][1]-symbol[s][1];
    e:=e*symbol[t][2]*symbol[s][2]/2;
    Mass:=Mass*2^e;
  end for;
end for;
nII:=0;
nonfreelove:={};
for i in [1..#symbol] do
   s:=symbol[i];
   if s[4] eq 0 then nII:=nII+s[2]; end if;
   if s[4] eq 1 and i eq 1 then  Include(~nonfreelove,s[1]-1);  end if;
   if s[4] eq 1 and i eq #symbol then  Include(~nonfreelove,s[1]+1);  end if;
   if s[4] eq 1 and i gt 1 then  
           if symbol[i-1][1] lt s[1]-1 then Include(~nonfreelove,s[1]-1); end if;
   end if;
   if s[4] eq 1 and i lt #symbol then  
           if symbol[i+1][1] gt s[1]+1 then Include(~nonfreelove,s[1]+1); end if;
   end if;
   if s[4] eq 1 and i gt 1 and symbol[i-1][4] eq 1 and symbol[i-1][1] eq s[1]-1 
    then nII -:= 1;
   end if; 
   free:=true;
   v:=s[1];
   if i gt 1 then 
       if symbol[i-1][1] eq v-1 and symbol[i-1][4] eq 1 then 
         free:=false;
       end if;
   end if;
   if i lt #symbol then
       if symbol[i+1][1] eq v+1 and symbol[i+1][4] eq 1 then
          free:=false; 
       end if;
   end if;
   d:=0; if s[3] eq -1 then d:=4; end if; 
   octane:=Integers(8) ! (s[5]+d); 
   if not free then 
         t:=0; dim:=s[2]-s[4]; if GF(2) ! dim eq 0 then dim:=dim+1; end if;
   end if;
if free then
   if octane eq Integers(8) ! 2 or octane eq Integers(8) ! (-2) then 
         t:=0; dim:=s[2]-s[4]; if GF(2) ! dim eq 0 then dim:=dim+1; end if;
   end if;
   if octane eq Integers(8) ! 1 or octane eq Integers(8) ! (-1) or 
    octane eq Integers(8) ! 0 then 
         t:=1; dim:=s[2]-s[4]; if GF(2) ! dim eq 1 then dim:=dim-1; end if;
   end if;
   if octane eq Integers(8) ! 3 or octane eq Integers(8) ! (-3) or 
    octane eq Integers(8) ! 4 then 
         t:=-1; dim:=s[2]-s[4]; if GF(2) ! dim eq 1 then dim:=dim-1; end if;
   end if;
end if;
   Mass:=Mass*massdiag(2,dim,t);
// The non-free love-forms are still missing
// They each contribute a factor 1/2 to the total mass
end for;

Mass:=Mass*2^(-nII); 
Mass:=Mass*2^(-#nonfreelove);
return Mass;
end function;

function massp(dim,symbol,det,prime) 
// returns the prime-local factor of the mass
// symbol = list of 3-tuples, [v,n,d] 
// v=valutation, n = dimension, d = determinant of the Jordan component
if (GF(2) ! dim eq 0) then
  m:=(dim-2) div 2; 
  t:=JacobiSymbol(det,prime); 
  standard:=2*(1-t*prime^(-m-1));
  for j in [1..m] do 
    standard:=standard*(1-prime^(-2*j)); 
  end for;
else
 m:=(dim-1) div 2;
 standard:=2;
  for j in [1..m] do 
    standard:=standard*(1-prime^(-2*j)); 
  end for;
end if;
Mp:=R ! standard;
for s in [1..#symbol] do 
  for t in [s+1..#symbol] do 
    e:=symbol[t][1]-symbol[s][1];
    e:=e*symbol[t][2]*symbol[s][2]/2;
    Mp:=Mp*prime^e; 
  end for;
end for;
for s in symbol do 
   if (GF(2) ! s[2]) eq 1 then 
     Mp:=Mp*massdiag(prime,s[2],0); 
   else
     m:=s[2] div 2; 
     t:=JacobiSymbol((-1)^m,prime)*s[3];
     Mp:=Mp*massdiag(prime,s[2],t);
   end if;
end for;
return Mp;
end function;

function masstotal_without(symbol, excludeprimes,det)
  // returns product of global, 2-local and all p-local factors of the mass
  // symbol must be of the form [<2, symbol at 2>, <prime_1, symbol at prime_1>, ..., <prime_n, symbol at prime_n>]

  dim := 0;
  //printf "symbol=%o\n",symbol;
  //printf "symbol[1]=%o\n", symbol[1];
  for s in symbol[1][2] do
    dim +:= s[2];
  end for;


  if not(2 in excludeprimes) then mass := mass2(dim, symbol[1][2], det); else mass := R!1; end if;

  for s in [2..#symbol] do
    if not(symbol[s][1] in excludeprimes) then mass *:= massp(dim, symbol[s][2], det, symbol[s][1]); end if;
  end for;

  return mass;    
end function;

function masstotal(symbol,det) 
  return masstotal_without(symbol, {},det);
end function;

