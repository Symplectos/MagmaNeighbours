/*
 * File:   RootSystemPos.magma
 * Author: Ivica Turkalj, Gilles Bellot
 * Date:   2014 - Dortmund - Germany
 *
 * Description: Computes root system, root basis, type of the root system and checks for reflectivity
 *
 * Literature:
 *
 * History:	-       2014: created by Ivica Turkalj
 * 		- 30/05/2014: made intrinsic (GB)
 *		- 30/05/2014: added English comments (GB)
 * 		- 30/05/2014: corrected a few spelling errors
 * Note:
 */

/*%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Input: G = Positiv-definite Integer-Matrix.

Berechnet im positiv-definiten Gitter (Z^n, G) folgende Invarianten:
Computes, for a positiv-definite lattice (Z^n, G), the following invariants:
- Wurzelsystem			(root system)
- Wurzelbasis			(basis of roots)
- Typ des Wurzelsystems		(type of the root system)
- die Eigenschaft "reflektiv"	(reflectivity)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%*/

intrinsic RootSystemPos(G::Mtrx) -> Bool
{ Computes the root system, a root basis, the type of the root system and checks for reflectivity of the positiv definite lattice defined by its Gramian G. }

n:=Rank(G);
L:=LatticeWithGram(G);
e:=Exponent(DualQuotient(L));
G:=ChangeRing(G,Rationals());
V:=KSpace(Rationals(),n,G);


/********* Berechnung des kompletten Wurzelsystems ***********/
roots:={};
for d in Divisors(e) do
 roots:=roots join {x[1] : x in ShortVectors(L meet d*Dual(L:Rescale:=false),d,d) | Gcd(Eltseq(x[1])) eq 1}  ;
 roots:=roots join {x[1] : x in ShortVectors(L meet d*Dual(L:Rescale:=false),2*d,2*d) | Gcd(Eltseq(x[1])) eq 1};
end for;
roots:=roots join {-x : x in roots};
roots:=Setseq(roots);



/************ Berechnung einer Wurzelbasis *************/
if roots ne [] then
 repeat 
   y:=Zero(V);
   for k:=1 to n do
     y:=Random(-1000000,1000000)*V.k+y;
   end for;
 until &and[(y,V!x) ne 0 : x in roots];
 PositiveRoots:=[];
 for x in roots do
   if (V!x,y) gt 0 then PositiveRoots[#PositiveRoots+1]:=x; end if;
 end for;
 FR:=PositiveRoots;
 for k:=1 to #PositiveRoots do
   for l:=k+1 to #PositiveRoots do
     FR:=Exclude(FR, PositiveRoots[k]+PositiveRoots[l]);
   end for;
 end for;
end if;


/****** Berechnung der kombinatorischen Klasse des Wurzelsystems ********************/
if roots ne [] then
 Cartan:=Matrix(#FR,#FR, [2*(V!FR[i],V!FR[j])/(V!FR[i],V!FR[i]) : i in [1..#FR], j in [1..#FR]] );
 CombClass:=RootSystem(Cartan);
end if;


/****** Gitter refektiv ? ***********************************/
IsReflective:=Dimension(L) eq Dimension(sub< L | roots>); 

return IsReflective;

end intrinsic;


          
             
        
        
